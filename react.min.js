/*
@module proxy

Provides the ability to wrap any object with a proxy that sets up interception
callbacks on any property set or nested array mutation. This sets a foundation
for aspect oriented style JavaScript.

You can use this standalone, separate from the rest of binder.
*/
/*
@private
List of methods on Array that mutate it in place.
*/
(function(){var e,t,n;e=["push","unshift","pop","shift","reverse","sort","splice"],t=function(n,r,i,s){var o,u,a,f,l,c,h;if(!n)return null;if(typeof n!="object")return n;if(n!=null?n.__proxied__:void 0)return n;r=r||function(e,t,n,r){},i=i||function(e,t,n,r){},s=s||{},o=function(e,o,u){return typeof u=="object"&&t(u,r,i,{parent:n}),r(n,e,o,s),i(n,e,u,s),u};for(a in n){f=n[a];if(Array.isArray(f)){l=function(){var e;return e=f[u],f[u]=function(){var s,o,u,l;r(n,a,f),o=e.apply(f,arguments);for(u=0,l=arguments.length;u<l;u++)s=arguments[u],t(s,r,i,{parent:f});return i(n,a,f),o}};for(c=0,h=e.length;c<h;c++)u=e[c],l()}f=t(f,r,i,{parent:n}),n.watch(a,o)}return Object.defineProperty(n,"__proxied__",{enumerable:!1,value:!0}),n},n=this,typeof module!="undefined"&&module!==null&&(typeof module!="undefined"&&module!==null?module.exports:void 0)&&(n=module.exports);if(n!=null?!n.binder:!void 0)n.binder={};n.binder.proxyObject=t}).call(this),Object.prototype.watch||Object.defineProperty(Object.prototype,"watch",{enumerable:!1,configurable:!0,writable:!1,value:function(e,t){var n=this[e],r=n,i=function(){return r},s=function(i){return n=r,r=t.call(this,e,n,i)};delete this[e]&&Object.defineProperty(this,e,{get:i,set:s,enumerable:!0,configurable:!0})}}),Object.prototype.unwatch||Object.defineProperty(Object.prototype,"unwatch",{enumerable:!1,configurable:!0,writable:!1,value:function(e){var t=this[e];delete this[e],this[e]=t}});